# -*- coding: utf-8 -*-
"""
Created on Thu Aug 24 21:15:49 2023

@author: danlu
"""

#NumPy is a Python library, NumPy is used for
#working with arrays, NumPy is short for 'Numerical
# Python"

#Data science is abranch of computer science
#where we study how to store, use and derive informaiton from it


#NumPy provides an array object that is up to 50 times faster than traditional python lists
#The array object in NumPy is called ndarray

#Why NumPy arrays are faster? Since they are 
#stored at one continuous place in memory unlike lists

#try use numpy
pip install numpy
import numpy as np
arr =np.array([1,3,5,7,9])
print(arr)

#0-D array  -- scaler
import numpy as np
array_0=np.array(34)
print(array_0)

#1D array
import numpy as np
array_1= np.array([1,3,5,7])
print(array_1)

# 2D arrays are used for matrix or 2nd order tensors
import numpy as np
array_2d = np.array([[1,3,5,7],[2,4,6,8]])
print(array_2d)
#check dimensions
print(array_2d.ndim)


#access 1D array elment
array_1=[10,20,30,40,50]
print(array_1[0]+array_1[3])

#Access 2D arrays : acess elemetn on the first row and second column

arr_2 =np.array([[5,10,15,20],[10,20,30,40]])
print(arr_2[0,1])


# Acessing 3D arrays ia a bit tricky
import numpy as np

arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])

print(arr[0, 1, 2])


#Slicing arrays: syntax: array[start:end:step]
#if we dont specify the start, the start is considered 0
#if we dont specify the end, the end is considered the end of slicing
#if we do not pass step, it is considered 1

import numpy as np
ar=np.array([1,4,7,10,20,30])
ar_up=ar[1:4]
print(ar_up)
print(ar[-3:-1])

#Slice 2D array, this example is tricky
import numpy as np

arr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])

print(arr[0:2, 2])

#From the second element, slice elements from index 1 to index 4 (not included):

import numpy as np

arr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])

print(arr[1, 1:4])

# Slice from both elements:
import numpy as np

arr = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]])
print(arr[0:2, 1:4])


# Converting data types on existing arrays on numpy ndarray
#Change data type from float to integer by using 'i' as parameter value:

import numpy as np
arr = np.array([1.1, 2.1, 3.1])
newarr = arr.astype('i')
print(newarr)
print(newarr.dtype) 


#Difference between copy and view of the array

import numpy as np
arr = np.array([3,30,300,3000])
arr_copy=arr.copy()
arr_copy
arr[2]

#view array 
print(arr.view())


#NumPy array shape returns a tuple to represent the shape of an array
import numpy as np
array_2=np.array([[1,10,100,100],[3,30,300,3000]])
print(array_2.shape)

#reshape function to reshape an array
import numpy as np
arr3=np.array([1,2,3,4,5,6,7,8,9,10])
arr4=arr3.reshape(2,5)
print(arr4)

#iterating an array
import numpy as np

arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])

for x in arr:
  for y in x:
    for z in y:
      print(z)



# Join two arrays
import numpy as np
arr1=np.array([[1,3,5,7],[11,13,15,17]])
arr2=np.array([[2,4,6,8],[12,14,16,18]])
#along rows
arr=np.concatenate((arr1,arr2),axis=1)
print(arr)


#split array in 3 parts
import numpy as np
arr = np.array([1, 2, 3, 4, 5, 6])

newarr = np.array_split(arr, 3)

print(newarr)


# NumPy Array Search function to search for the index for specific values
import numpy as np
arr=np.array([1,2,3,4,3,3,2])
x=np.where(arr==3)
#The example returns a tuple (array([2,4,5]),),which means the value is present at index 2,4,5
print(x)


#find indexes where the values are odd
import numpy as np
arr=np.array([1,3,5,7,9,10,20,40])
y=np.where(arr%2==1)
print(y)

#searchsorted is used to insert a value to the array so that the next value after the insertion is no longer smaller (equal or bigger)
arr3 = np.array([3,5,7,9,11,12])
arr4 = np.searchsorted(arr3,7)
print(arr4)

#insert multiple number in an array
import numpy as np 
arr = np.array([1,3,5,7,])
x = np.searchsorted(arr,[2,4,6])
print(x)

#sort 1D array and 2D arrays
import numpy as np
arr = np.array([3, 2, 0, 1])
print(np.sort(arr))

arr2D = np.array([[3,1,5],[10,50,30]])
y_arr = np.sort(arr2D)
print(y_arr)

# Filtering array
#Get some elements out of an exiting array and create a new array out of them is 
#called filtering : boolean method is used

import numpy as np
arra = np.array([41,42,43,44,45])
x=[True,True,False,True,True]
print(arra[x])

#create a fliter array that will return only values are higher than 42
import numpy as np
arr5=np.array([40,41,42,43,44,45])
filter_arr = []
for x in arr5:
    if x> 42:
        filter_arr.append(True)
    else:
        filter_arr.append(False)

new_arr =arr5[filter_arr]
print(new_arr)


#Pseudo random and truly random data
from numpy import random
x=random.randint(200)
print(x)

#rand() returns a random float between 0 and 1
from numpy import random
x= random.rand()
print(x)


# generate a random choice from an array
arr =np.array([100,200,300,400])
from numpy import random
x=random.choice(arr,size=(2,3))
print(x)


# Data Distribution is a list of all possible values and how often each value occurs
# A random distribution is a set of random numbers that follow a certain probability density function
# A PDF probability density functioni describes a continuous probability
from numpy import random
#the sum of all probabilities should be 1 
x = random.choice([5,7,9,11],p=[0,.5,.25,.25],size=(12))
print(x)


from numpy import random
y=random.choice([1,10,100,1000],p=[0,0.5,0.5,0],size=(2,2))
print(y)

#shuffle and permutation of an array: shuffle makes changes to the original array
#and permutation returns a re-arranged array with original array unchanged

#Visualize distribution with Seaborn

pip install seaborn
import seaborn as sns
import matplotlib as plt
sns.distplot([1,2,3,4,5])
plt.show()


# The Normal Distribution is one of the most important distributions
# It is also called Gaussian Distribution after the German mathematician
#random.normal


from numpy import random
#5 arrays embedded in one array, each array has 6 elements
x = random.normal (size =(5,6))
print(x)

# create a random normal distribition of size 2*# with mean beiing 1 and variance being 2
from numpy import random

x = random.normal(loc=1, scale=2, size=(2, 3))

print(x)


#Visualization of Normal Distribution--Curve a normal distribution is also known as Bell Curve
from numpy import random
import matplotlib.pyplot as plt
import seaborn as sns
sns.distplot(random.normal(size=(1000),hist = False)
plt.show()

# Binomial distribution: discrete, Binomial Distribution is a Discrete Distribution.
# If there are enoough data points for binomial distribution, it will be
#similiar to normal distribution with certain loc and sclae

from numpy import random
import matplotlib.pyplot as plt
import seaborn as sns
sns.distplot(random.normal(loc=50,scale=5,size =1000),norm_hist= False, label = "normal",color="green")
sns.displot(random.binomial(n=100,p =0.5,size =1000), label = 'binomial',color="red")
plt.show()

# Poisson Distribution -- a discrete distribition : it esimateds how many times an event happens, rate of occurrences and size 
#Generate a random 1*10 distribution for occurence of 2
#random.poisson(lam = ,size = )
from numpy import random
x = random.poisson (lam =2, size = 10)
print(x)

# Visuallization of Poisson's distribution
from numpy import random
import matplotlib as plt
import seaborn as sns

sns.distplot(random.poisson(lam=50,size =1000),hist =False, label="Poisson's distribution",color="pink")
sns.distplot(random.normal(loc =50, scale =1, size = 1000), hist = False, label = "Normal distribution")
plt.show()


# Difference between Binomial and Poission's distribution
# Binomial distribution only has two possible outcomes, whereas poisson distribution can have unlimited possible outcomes.

#But for very large n and near-zero p binomial distribution is near identical to poisson distribution such that n * p is nearly equal to lam.



#Uniform distribution: every element has an equal chance.random.uniform returns a certain size of an array
from numpy import random
x=random.uniform(size=(4,3))
print(x)

#Visuallization of Uniform Distribution
from numpy import random
import matplotlib.pyplot as plt
import seaborn as sns
sns.distplot(random.uniform(size=100000),hist=False)
plt.show()

#Logistic distribution. Logistic distribution has three parameters: loc(mean), scale(flatneess) and size
#It is frequently used in machine learning in logistic regression and neural networks. Used for growth description
# Slightly different from normal dist in that it has higher probability at ends
from numpy import random
x=random.logistic(loc=1,scale=3,size=(2,3))
print(x)

#Visualization
from numpy import random
import matplotlib.pyplot as plt
import seaborn as sns
x=sns.distplot(random.logistic(size=1000),hist=False)
plt.show()


#Multinomial distribution -unlike binomial, it has multiple outcomes
#It has three parameters: n (number of possible outcomes),pvlas:list of prabilities of outcomes,size(shape of returned array)
from numpy import random
x=random.multinomial(n=6,pvals=[1/6,1/6,1/6,1/6,1/6,1/6])
print(x)

#Exponential distribution: scale =inverse of rate, size is the returned array
from numpy import random
x=random.exponential(scale = 2, size =(2,3))
print(x)

#Poissoin distribution deals with the number of occrences of an event in a time period
#Exponential distribution deals with the time between it

from numpy import random
import matplotlib.pyplot as plt
import seaborn as sns
sns.distplot(random.exponential(size=1000),hist=False)
plt.show()

#Chi Square Distribution is used as a basis to verify hypothesis
It has two parameters,df (deg of freedom) and size (shape of array)
form numpy import random
x=random.chisquare(df=2,size=(4,5))
print(x)

# Visualization of Chi Square Distribution
from numpy import random
import matplotlib.pyplot as plt
import seaborn as sns
sns.distplot(random.chisquare(df=1,size=1000),hist=False)
plt.show()

#Rayleigh distribution: Rayleigh distribution is used in signal processing
#It has two parameters: scale (flatness) and size (shape of the returned array)
from numpy import random
x=random.rayleigh(scale =2, size =(2,3))
print(x)

#pareto distribution
#pareto distribution is used for distribution following Pareto's law such as 80-20 distribution
It has two paremeters: shape factor and size of an array


#Zipf distribution
#Zipf Law: In a collection, the nth coomen term is 1/n times of the most common
#term. Eg, the 5th most common word nearly 1/5 times as often as the most coomon word

from mumpy import random
x=random.zipf(a=2,size=(4,5))
print(x)


#Numpy Ufuncs
#Ufuncs stand for universial functions, they are NumPy functions that operate on the ndarray dataset
#ufuncs are used to implement vectorization, which ahas three arguments including where to take actions and the return type of data types and output array value
#An example to use slower python's built-in zip method vs ufunc add(x,y)
arr_x =[1,3,5,7]
arr_y=[2,4,6,8]
z=[]
for i,j in zip(arr_x,arr_y):
 z.append(i+j)
print(z)

#ufunc method
import numpy as np
arr_x = [1,3,5,7]
arr_y = [2,4,6,8]
z=np.add(arr_x,arr_y)
print(z)

#Create your own ufunc
#The frompyfunc() method takes three arguments: function name, input array number and output array number
import numpy as np
arr_x =[10,20]
arr_y=[5,10]

def myadd(x,y):
    return x+y
myadd = np.frompyfunc(myadd,2,1)
print(myadd(arr_x,arr_y))
#check if a function is a ufunc
print(type(myadd))

#Other ufunc methods such as np.add and np.substract could be useful
#Remove the decimals, and return the float number closest to zero. Use the trunc() and fix() functions.

import numpy as np
print(np.trunc([3.1111,-3.0003]))
print(np.round([4.6,4.5,4.4]))

#Ceil() rounds off decimal to nearest upper integer
print(np.ceil([2.3,2.2,3.9]))

#ufunc Logs: log at base of 2, 10, e
import numpy as np
arr = np.log10([1,10,100])
print(arr)

#ufunc summations. The difference between summation and add is 
#summation returns the sum of all the elements
import numpy as np
arr1=np.array([1,2,3])
arr2=np.array([4,5,6])
newarr= np.sum([arr1,arr2])
print(newarr)

# Find the product of the elemetns of one array
import numpy as np
arr =np.array([1,2,3,4])
x = np.prod(arr)
print(x)

#ufunc difference calculates diff of each element in array
import numpy as np
arr=np.array([10,20,30,40])
newarr =np.diff(arr)
print(newarr)

#Finding LCM : lowest common multiple
import numpy as np
num1 = 4
num2 = 6
x=np.lcm(num1,num2)
print(x)


#GCD(greatest common donominator)
#HCF (highest common facto)
import numpy as np
num1 = 6
num2 = 9
x =np.gcd(num1,num2)
print(x)

#Trigononmetric functions
import numpy as np
x = np.sin(np.pi/2)
print(x)

#Hyperbolic functions: they are similar to triogonmetric functions
import numpy as np
x=np.sinh(np.pi/2)
print(x)

#ufunc sets have a lot of functions
import numpy as np
arr =  np.array([1,2,2,2,2,4,4,4,5,5,6,6])
x=np.unique(arr)
print(x)

import numpy as np
arr1 = np.array([1,2,3,4,5,6])
arr2=np.array([5,6,7,8,9])
x=np.intersect1d(arr1,arr2)
print(x)


































































































